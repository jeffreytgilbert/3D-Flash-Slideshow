/*** FrameScriptManager by Grant Skinner. Nov 13, 2007* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2011 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.utils {	import flash.display.MovieClip;	public class FrameScriptManager {	// constants:	// private properties:		private var target:MovieClip;		private var labels:Object;			// public properties:			// constructor:		public function FrameScriptManager(target:MovieClip) {			this.target = target;			updateLabels();		}			// public getter/setters:	// public methods:		public function setFrameScript(frame:*, funct:Function):void {			var frameNum:uint = getFrameNumber(frame);			if (frameNum == 0) { return; }			target.addFrameScript(frameNum-1,funct);		}				public function getFrameNumber(frame:*):uint {			var frameNum:uint = uint(frame);			if (frameNum) { return frameNum; }			var label:String = String(frame);			if (label == null) { return 0; }			frameNum = labels[label];			return frameNum;		}		// private methods:		private function updateLabels():void {			var lbls:Array = target.currentLabels;			labels = {};			for (var i:uint=0; i<lbls.length; i++) {				labels[lbls[i].name] = lbls[i].frame;			}		}	}}