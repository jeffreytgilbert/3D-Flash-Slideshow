package  {		import com.gskinner.utils.PerformanceTest;		public class BarGraphLogger {			// Constants:			// Public Properties:			// Protected Properties:		protected var _barGraph:BarGraph;		protected var index:int=-1;		protected var performanceTest:PerformanceTest;		protected var maxValue:Number=0;		protected var values:Array;		protected var _paused:Boolean;			// Initialization:		public function BarGraphLogger(barGraph:BarGraph, testSuite:Object) {			values = [];			_barGraph = barGraph;			var hasTare:Boolean = testSuite.methods.indexOf("tare") > -1;			barGraph.labels = "methodLabels" in testSuite ? testSuite.methodLabels.slice(hasTare?1:0) : testSuite.methods.slice(hasTare?1:0);			performanceTest = new PerformanceTest();			performanceTest.logger = this;			var l:uint = testSuite.methods.length;			for (var i:uint=0; i<l; i++) {				performanceTest.testFunction(testSuite[testSuite.methods[i]], testSuite.iterations, testSuite.methods[i]);				barGraph.setValueLabelAt("waiting",Math.min(barGraph.labels.length-1,i));			}						var label:String = ""; //testSuite.description ? testSuite.description : "";			if ("loops" in testSuite ) {				if (label.length > 0) { label += " "; }				label += "["+testSuite.loops.toExponential(0).split("+").join("")+" loops]";			}			barGraph.label = label;		}			// Public getter / setters:		public function get paused():Boolean {			return _paused;		}		public function set paused(value:Boolean):void {			performanceTest.paused = _paused = value;		}			// Public Methods:		public function logBegin(name:String,description:String,iterations:uint):void {			if (name == "tare") { return; }			_barGraph.setValueLabelAt("running",index+1);		}				public function logError(name:String,details:Error):void {			throw(details);		}				public function logMethod(name:String, time:uint, iterations:uint, details:*):void {			if (name == "tare") { return; }			time /= iterations;			index++;			maxValue = Math.max(time,maxValue);			_barGraph.setValueLabelAt(Math.round(time)+"ms",index);			values[index] = time;		}				public function logEnd(name:String):void {			if (index < _barGraph.labels.length-1) { return; }			_barGraph.data = values;		}					// Protected Methods:		protected function formatNumber(num:Number,decimal:uint=2):String {			var m:Number = Math.pow(10,decimal);			var str:String = String( (Math.round(num*m)+0.5)/m );			return str.substr(0,str.length-1);		}	}	}