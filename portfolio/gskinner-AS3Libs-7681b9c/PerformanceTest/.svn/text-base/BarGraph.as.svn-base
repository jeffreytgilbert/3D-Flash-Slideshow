package  {		import flash.display.Sprite;	import flash.geom.ColorTransform;	import com.gskinner.motion.GTween;	import mx.effects.easing.*;		public class BarGraph extends Sprite {			// Constants:		static const DEFAULT_COLORS:Array = [0xFF6633, 0x33CC00, 0xFF33CC, 0x00CCFF, 0xAA66FF];			// Public Properties:		public var maxValue:Number = NaN;		public var valueSuffix:String = "ms";			// Protected Properties:		protected var _width:Number;		protected var _height:Number;		protected var _labels:Array;		protected var _data:Array;		protected var _colors:Array = DEFAULT_COLORS;		protected var _valueLabels:Array;		protected var bars:Array;		protected var yOff:Number=-1;		protected var graphLabel:GraphLabel;			// Initialization:		public function BarGraph() {			_width = super.width;			_height = super.height;			scaleX = scaleY = 1;			_data = [];			while(numChildren > 0) { removeChildAt(0); }		}			// Public getter / setters:		public function set labels(value:Array):void {			_labels = value;			bars = [];			_valueLabels = [];			var l:uint = value.length;			var w:Number = (_width-5*(l-1))/l;			for (var i:uint=0; i<l; i++) {				var label:BarLabel = new BarLabel();				if (yOff == -1) { yOff = label.height+5; }				label.labelFld.text = value[i];				label.background.pattern = "diagonal";				label.background.color = 0xCCCCCC;				label.background.width = w-10;				label.labelFld.width = w-20;				label.x = 5+(w+5)*i;				label.y = _height-yOff+5;				addChild(label);								var color:uint = _colors[i%_colors.length];								var bar:Bar = new Bar();				bar.transform.colorTransform = new ColorTransform(0,0,0,1,color>>16&0xFF,color>>8&0xFF,color&0xFF);				bar.width = w;				bar.x = (w+5)*i;				bar.y = _height-yOff;				bar.height = 4;				bar.alpha = 0.1;				addChild(bar);				bars[i] = bar;								var valueLabel:BarValue = new BarValue();				valueLabel.x = label.x;				valueLabel.labelFld.width = w-10;				valueLabel.y = bar.y-bar.height;				addChild(valueLabel);				_valueLabels[i] = valueLabel;								_data[i] = 0;			}		}		public function get labels():Array {			return _labels;		}				public function get data():Array {			return _data;		}		public function set data(value:Array):void {			setData(value);		}				public function set label(value:String):void {			if (graphLabel == null) {				graphLabel = new GraphLabel();				graphLabel.x = _width>>1;				graphLabel.y = _height;				addChild(graphLabel);			}			graphLabel.labelFld.text = value;			graphLabel.labelFld.width = Math.min(_width,graphLabel.labelFld.textWidth+8);			graphLabel.labelFld.x = -(graphLabel.labelFld.width>>1);			graphLabel.visible = (value != null && value != "");		}				public function set valueLabels(value:Array):void {			for (var i:uint=0; i<value.length; i++) {				var valueLabel:BarValue = _valueLabels[i];				if (valueLabel == null) { break; }				valueLabel.labelFld.text = String(value[i]);			}		}			// Public Methods:		public function setData(data:Array, tween:Boolean=true):void {			var l:uint = data.length;			var i:uint;			if (isNaN(maxValue)) {				maxValue = -1;				for (i=0; i<l; i++) {					if (data[i] > maxValue) { maxValue = data[i]; }				}			}			for (i=0; i<l; i++) {				setDataAt(data[i], i, tween, true);			}		}				public function setValueLabelAt(label:String, index:uint):void {			var valueLabel:BarValue = _valueLabels[index];			valueLabel.labelFld.text = label;			valueLabel.alpha = 1;		}				public function setDataAt(data:Number, index:uint, tween:Boolean=true, delay:Boolean=false):void {						_data[index] = data;			var valueLabel:BarValue = _valueLabels[index];			valueLabel.labelFld.text = String(data)+valueSuffix;			var bar:Bar = bars[index];			var h:Number = (_height - yOff)*Math.min(1,(data/maxValue))>>0;			if (tween) {				new GTween(bar, 0.4+(data/maxValue)*0.4, {height:h, alpha:1}, {ease:Sine.easeOut, delay:(delay?index*0.3:0)});				new GTween(valueLabel, 0.4+(data/maxValue)*0.4, {y:_height-yOff-h, alpha:1}, {ease:Sine.easeOut, delay:(delay?index*0.3:0)});			} else {				bar.alpha = 1;				bar.height = h;				valueLabel.y = _height-yOff-h;			}		}					// Protected Methods:			}	}