package  {		import flash.display.BitmapData;	import flash.display.Sprite;	import flash.geom.ColorTransform;		public class PatternRect extends Sprite {				protected static var patterns:Object;		public static function definePattern(name:String, bmpd:BitmapData):void {			if (patterns == null) { patterns = {}; }			patterns[name] = bmpd;		}			// Constants:			// Public Properties:			// Protected Properties:		protected var _pattern:String;		protected var _width:Number;		protected var _height:Number;		protected var _color:uint;			// Initialization:		public function PatternRect() {			_width = super.width;			_height = super.height;			scaleX = scaleY = 1;			removeChildAt(0);			cacheAsBitmap = true;		}			// Public getter / setters:		[Inspectable(defaultValue='',name='pattern')]		public function get pattern():String {			return _pattern;		}		public function set pattern(value:String):void {			_pattern = value;			draw();		}				override public function get width():Number {			return _width;		}		override public function set width(value:Number):void {			_width = value;			draw();		}				override public function get height():Number {			return _height;		}		override public function set height(value:Number):void {			_height = value;			draw();		}				[Inspectable(type='Color',defaultValue=0x000000,name='color')]		public function get color():uint {			return _color;		}		public function set color(value:uint):void {			_color = value;			transform.colorTransform = new ColorTransform(0,0,0,1,value>>16&0xFF,value>>8&0xFF,value&0xFF,0);		}			// Public Methods:			// Protected Methods:		protected function draw():void {			graphics.clear();			var bmpd:BitmapData = patterns[_pattern];			graphics.beginBitmapFill(bmpd);			graphics.drawRect(0,0,_width,_height);		}			}	}