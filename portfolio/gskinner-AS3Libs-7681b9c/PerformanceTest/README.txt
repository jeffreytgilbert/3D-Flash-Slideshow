Docs.API documentation in the /docs/ folder. Visit gskinner.com/blog for updates and more info. I would strongly recommend looking at the source code for the "Functions.as" performance test sample.Flex.PerformanceTest is pure AS3 and works fine with Flex. You can use the Main classes with only minor edits (ex. rewriting the out function).Flash Player 9.PerformanceTest is compatible with Flash Player 9. However some of the sample tests use Vector and will not run in player 9.License.PerformanceTest is licensed under MIT. Read the source code header for more information.-- Quick things to note --Logging.It's simple to change how results are logged. See "logger" and "out" in the API docs.Test suites.Pass any class instance to testSuite, and it will test every public method on the instance. Or, you can add "name", "description", and "methods" properties to the class to formalize the testing.Object test suites.You can even create a generic object with functions as properties, and add a "methods" property or use the "methods" parameter to specify the functions to run.Quick tests.Beyond building formal test suites, you can also test individual functions with testFunction, or test specific methods on an existing class by passing a "methods" param to testSuite.Testing render times.Want to benchmark how much time it takes Flash to render complex vectors or filters? Pass a display object to testRender to time how long it takes to render.Tare methods.Just like the tare function on a scale, specifying a tare method in your test suite allows you to establish a base time for your tests, and isolate the significant operations. The tare function will be run until it runs in a consistent amount of time, then that time will be subtracted from all other tests. See "testSuite" in the API docs for more info.Queuing.TestPerformance will automatically queue multiple tests and run them asynchronously so they don't affect each other or stall the player.