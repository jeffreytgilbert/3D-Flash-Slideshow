/*** checkVersion() by Grant Skinner. Feb 20, 2008* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2011 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package  {		import flash.display.Sprite;		public class VersionStringComparison extends Sprite {	// Initialization:		public function VersionStringComparison() {			trace(checkVersion("1.0","1.0"));			trace(checkVersion("v1.0","1.0"));			trace(checkVersion("1.0.2","1.0.1"));			trace(checkVersion("1.0.12","1.0.2"));			trace(checkVersion("1.0.2","1.0b1"));			trace(checkVersion("1.0.2","1.0.b1"));			trace(checkVersion("1.0","1.0b1"));			trace(checkVersion("1.0.2.1","1.0.2"));			trace(checkVersion("1.0 b2","1.0 a5"));		}			// Public Methods:		// returns 1 if the first version number is greater than the second, -1 if it is lesser or 0 if it is equal:		// works with most common versions strings: ex. 1.0.2.27 < 1.0.3.2, 1.0b3 < 1.0b5, 1.0a12 < 1.0b7, 1.0b3 < 1.0		public function checkVersion(v1:String, v2:String):int {						var arr1:Array = v1.replace(/^v/i,"").match(/\d+|[^\.,\d\s]+/ig);			var arr2:Array = v2.replace(/^v/i,"").match(/\d+|[^\.,\d\s]+/ig);			var l:uint = Math.max(arr1.length,arr2.length);			for (var i:uint=0; i<l; i++) {				var sub:int = checkSubVersion(arr1[i],arr2[i])				if (sub == 0) { continue; }				return sub;			}			return 0;		}					// Protected Methods:		// return 1 if the sub version element v1 is greater than v2, -1 if v2 is greater than v1, and 0 if they are equal		protected function checkSubVersion(v1:String, v2:String):int {			v1 = (v1 == null) ? "" : v1.toUpperCase();			v2 = (v2 == null) ? "" : v2.toUpperCase();						if (v1 == v2) { return 0; }			var num1:Number = parseInt(v1);			var num2:Number = parseInt(v2);			if (isNaN(num2) && isNaN(num1)) {				return (v1 == "") ? 1 : (v2 == "") ? -1 : (v1 > v2) ? 1 : -1;			}			else if (isNaN(num2)) { return 1; }			else if (isNaN(num1)) { return -1; }			else { return (num1 > num2) ? 1 : -1; }		}	}	}