/*** Chunker by Grant Skinner. Apr 17, 2011* Visit www.gskinner.com/blog for documentation, updates and more free code.*** Copyright (c) 2011 Grant Skinner* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package com.gskinner.utils {		import flash.display.Shape;	import flash.events.Event;	import flash.utils.getTimer;		public class Chunker {				static protected var shape:Shape; // broadcasts ENTER_FRAME			// Constants:			// Public Properties:		public var method:Function;		public var time:uint;		public var data:Object;			// Protected Properties:		protected var _paused:Boolean;			// Initialization:		public function Chunker(time:uint, method:Function, data:Object=null) {			if (shape == null) { shape = new Shape(); }			this.time = time;			this.method = method;			this.data = data;			paused = false;		}			// Public getter / setters:		public function get paused():Boolean {			return _paused;		}		public function set paused(value:Boolean):void {			_paused = value;			if (value) { shape.removeEventListener(Event.ENTER_FRAME, tick); }			else { shape.addEventListener(Event.ENTER_FRAME, tick, false, 0, true); }		}			// Public Methods:			// Protected Methods:		public function tick(evt:Event):void {			var t:uint = getTimer();			while (getTimer() < t+time && !_paused) { method(this); }		}			}	}