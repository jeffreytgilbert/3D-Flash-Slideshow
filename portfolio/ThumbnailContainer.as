package  {	import flash.display.Shape;	import flash.events.Event;	import com.greensock.TweenLite;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.geom.Matrix;	import com.greensock.easing.Elastic;	import com.greensock.easing.Circ;		// this contains the album thumbnails that launch the slideshow	public class ThumbnailContainer extends Sprite {		public static const ALBUMS_EMPTY:String			= 'albumsEmpty';		public static const ALBUMS_DONT_FIT:String		= 'albumsDontFit';		public static const ALBUMS_HIDDEN:String 		= 'albumsHidden';		public static const ALBUMS_VISIBLE:String 		= 'albumsVisible';				public static const SLIDESHOW_MODE:String 		= 'slideshowMode';		public static const ALBUM_VIEW_MODE:String 		= 'albumViewMode';		public static const EMPTY_MODE:String 			= 'emptyMode';		public static const LAYOUT_UPDATED:String 		= 'layoutUpdated';		public static const UPDATE_LAYOUT:String		= 'updateLayout';				private var _bgColor:uint			= 0x888899;		private var _bgShape:Shape			= new Shape();				// 3D stuff//		private var _pp:PerspectiveProjection			= transform.perspectiveProjection;				private var _albumViewMode:String;		public function get albumViewMode():String{ return _albumViewMode; }				// the way this renders isn't technically right based on the way the dom renders it, so i'll probably fix this		private const SMALLEST_THUMBNAIL_SIZE:Number	= 50;				private var _thumbnailCollection:Array = new Array();		public function get thumbnailCollection():Array{ return _thumbnailCollection; }//		public function set thumbnailCollection(thumbnailCollection:Array):void{ _thumbnailCollection=thumbnailCollection; }				private var _meta:XML;		public function get meta():XML{ return _meta; }		public function set meta(meta:XML):void{ _meta=meta; }		private var _containerPadding:Padding;		public function set containerPadding(containerPadding:Padding):void{			_containerPadding = containerPadding;			updateDisplayList();		}		public function get containerPadding():Padding{ return _containerPadding; }		private var _listPadding:Padding;		public function set listPadding(listPadding:Padding):void{			_listPadding = listPadding;			updateDisplayList();		}		public function get listPadding():Padding{ return _listPadding; }		public function ThumbnailContainer(albumList:XML, containerPadding:Padding=null, listPadding:Padding=null) {//			trace('Loaded ThumbnailContainer');			// constructor code			_meta = albumList;			if(!containerPadding){ containerPadding = new Padding(10); }			_containerPadding = containerPadding;			if(!listPadding){ listPadding = new Padding(5); }			_listPadding = listPadding;						addChild(_bgShape);			_bgShape.alpha=.5;			var thumbnailPadding:Padding = new Padding(4,4,20,4);						if(_meta.albums && _meta..album.length() == 1){				_thumbnailCollection[0] = new Thumbnail(_meta..album[0],50,50,thumbnailPadding);				addChild(_thumbnailCollection[0]);				_albumViewMode = SLIDESHOW_MODE;			} else if(_meta.albums && _meta..album.length() > 1){				for(var albumPos:uint = 0; albumPos < _meta..album.length(); albumPos++){					_thumbnailCollection[albumPos] = new Thumbnail(_meta..album[albumPos],50,50,thumbnailPadding);					addChild(_thumbnailCollection[albumPos]);					_thumbnailCollection[albumPos].z=THUMB_ZOOM_OUT;					_thumbnailCollection[albumPos].alpha=0;				}				_albumViewMode = ALBUM_VIEW_MODE;			} else {				_albumViewMode = EMPTY_MODE;			}						addEventListener(Event.ADDED_TO_STAGE,loadAlbum);		}				private function enableInteractions(evt:Event=null):void{			var tl:uint = _thumbnailCollection.length;			var i:uint = 0;			while(i<tl){				_thumbnailCollection[i].addEventListener(MouseEvent.ROLL_OVER, rollOverHandler);				_thumbnailCollection[i].addEventListener(MouseEvent.ROLL_OUT, rollOutHandler);				_thumbnailCollection[i].addEventListener(MouseEvent.CLICK, launchSlideshow);				i++;			}		}				private function disableInteractions(evt:Event=null):void{			var tl:uint = _thumbnailCollection.length;			var i:uint = 0;			while(i<tl){				_thumbnailCollection[i].removeEventListener(MouseEvent.ROLL_OVER, rollOverHandler);				_thumbnailCollection[i].removeEventListener(MouseEvent.ROLL_OUT, rollOutHandler);				_thumbnailCollection[i].removeEventListener(MouseEvent.CLICK, launchSlideshow);				i++;			}		}				public function loadThumbnails():void{			var tl:uint = _thumbnailCollection.length;			var i:uint = 0;			while(i<tl){				_thumbnailCollection[i].loadImage();				i++;			}		}//		public function setRegistrationPoint(s:Sprite, regx:Number, regy:Number):void {			//translate sprite//			s.transform.matrix = new Matrix(1, 0, 0, 1, -regx, -regy);//		}				private function rollOverHandler(evt:MouseEvent):void{			var thumb:Thumbnail = (evt.currentTarget as Thumbnail);			var newThumbSize:Number = (thumb.photosOriginalWidth + (thumb.photosOriginalWidth*.20));//			TweenLite.to(thumb, 1, { z:-10, ease:Circ.easeOut }); // rotation X has to be flipped because 0 is the highest position not the lowest			TweenLite.to(thumb.photoShape, 10, { 				width:newThumbSize, 				height:newThumbSize, 				x:thumb.padding.left - ((newThumbSize-thumb.photosOriginalWidth)/2), 				y:thumb.padding.top - ((newThumbSize-thumb.photosOriginalHeight)/2), 				ease:Circ.easeOut 			}); // rotation X has to be flipped because 0 is the highest position not the lowest		}				private function rollOutHandler(evt:MouseEvent):void{			var thumb:Thumbnail = (evt.currentTarget as Thumbnail);//			TweenLite.to(thumb, 1, { z:DEFAULT_THUMB_ZOOM, ease:Circ.easeOut }); // rotation X has to be flipped because 0 is the highest position not the lowest			TweenLite.to(thumb.photoShape, 1, { 				width:thumb.photosOriginalWidth, 				height:thumb.photosOriginalHeight, 				x:thumb.padding.left, 				y:thumb.padding.top, 				ease:Circ.easeOut 			}); // rotation X has to be flipped because 0 is the highest position not the lowest		}				private function launchSlideshow(evt:Event):void{			trace(AlbumEvent.LAUNCH_SLIDESHOW);//			(evt.currentTarget as Thumbnail).meta..photo[0];			dispatchEvent(new AlbumEvent(AlbumEvent.LAUNCH_SLIDESHOW,(evt.currentTarget as Thumbnail).meta,true,true));		}		private function changeBgImage(evt:Event):void{			trace(AlbumEvent.CHANGE_FULLSCREEN_PHOTO);//			(evt.currentTarget as Thumbnail).meta..photo[0];			dispatchEvent(new AlbumEvent(AlbumEvent.CHANGE_FULLSCREEN_PHOTO,(evt.currentTarget as Thumbnail).meta..photo[0],true,true));		}				public function loadAlbum(evt:Event=null):void{//			removeEventListener(Event.ADDED_TO_STAGE,loadAlbum);//			trace('loadAlbum');			updateDisplayList();			switch(_albumViewMode){				case SLIDESHOW_MODE: dispatchEvent(new Event(SLIDESHOW_MODE,true)); break;				case ALBUM_VIEW_MODE: dispatchEvent(new Event(ALBUM_VIEW_MODE,true)); break;				case EMPTY_MODE: dispatchEvent(new Event(EMPTY_MODE,true)); break;			}		}				public static const DEFAULT_THUMB_ZOOM:Number = 0;		public static const THUMB_ZOOM_OUT:Number = -800;				public function showAlbum(speed:Number=1):void{						dispatchEvent(new Event('ShowSalesInfo',true,true));						trace('showing it now');			var tl:uint = _thumbnailCollection.length;			var i:uint = 0;			var delayArray:Array = [];			while(i<tl){ delayArray[i] = i++; }			delayArray = BitmapUtils.randomizeArray(delayArray);			i=0;			z:-800;			alpha:0;			var high:Number = 60;			var low:Number = -60;			TweenLite.to(this,.5,{ 				alpha:1, z:100, ease:Elastic.easeInOut, onComplete:function():void{					while(i<tl){						_thumbnailCollection[i].z=THUMB_ZOOM_OUT;						_thumbnailCollection[i].alpha=0;						trace(rotationZ);//						TweenLite.to(_thumbnailCollection[i],2,{ z:DEFAULT_THUMB_ZOOM, delay:delayArray[i]*.1, ease:Elastic.easeOut });						_thumbnailCollection[i].rotationY = Math.floor(Math.random()*(1+high-low))+low;						if(delayArray[i] == tl-1){							TweenLite.to(_thumbnailCollection[i],1.5,{								delay:delayArray[i]*.05, alpha:1, z:DEFAULT_THUMB_ZOOM, rotationY:0, ease:Elastic.easeOut, onComplete:function():void{									dispatchEvent(new Event(ALBUMS_VISIBLE,true,true));									enableInteractions();								}							});						} else {							TweenLite.to(_thumbnailCollection[i],1.5,{ alpha:1, delay:delayArray[i]*.05, z:DEFAULT_THUMB_ZOOM, rotationY:0, ease:Elastic.easeOut });						}						i++;					}				}			});		}				public function hideAlbum(speed:Number=1):void{						dispatchEvent(new Event('HideSalesInfo',true,true));						disableInteractions();			var tl:uint = _thumbnailCollection.length;			var i:uint = 0;			var delayArray:Array = [];			while(i<tl){ delayArray[i] = i++; }			delayArray = BitmapUtils.randomizeArray(delayArray);			i=0;			while(i<tl){				_thumbnailCollection[i].alpha=1;				TweenLite.to(_thumbnailCollection[i],1,{ alpha:0, z:DEFAULT_THUMB_ZOOM, delay:delayArray[i]*.05 });				i++;			}			TweenLite.to(this,tl*.3,{ 				alpha:0, z:500, ease:Circ.easeOut, onComplete:function():void{					dispatchEvent(new Event(ALBUMS_HIDDEN,true,true));//					showAlbum();				}			});			/*						while(i<tl){				_thumbnailCollection[i].z=DEFAULT_THUMB_ZOOM;				_thumbnailCollection[i].alpha=1;//				TweenLite.to(_thumbnailCollection[i],1,{ delay:delayArray[i]*.05, z:-800 });				if(delayArray[i] == tl-1){					TweenLite.to(_thumbnailCollection[i],1,{						delay:delayArray[i]*.01, alpha:0, z:THUMB_ZOOM_OUT, ease:Circ.easeOut, onComplete:function():void{							TweenLite.to(this,.5,{ 								alpha:0, ease:Circ.easeOut, onComplete:function():void{									dispatchEvent(new Event(ALBUMS_HIDDEN,true,true));								}							});						}					});				} else {					TweenLite.to(_thumbnailCollection[i],1,{ alpha:0, delay:delayArray[i]*.05, z:THUMB_ZOOM_OUT, ease:Circ.easeOut });				}				i++;			}*/		}				public var total_pixel_area_width:Number;		public var total_pixel_area_height:Number;				public function updateDisplayList(evt:Event=null):void{			if(!stage) return;						dispatchEvent(new Event(UPDATE_LAYOUT));			var thumbnailPadding:Padding = _thumbnailCollection[0].padding;						var total:uint = _meta..album.length(); // some total of albums			var square_size:uint=0; // number of columns and rows in the square			var square:uint=0; // total items containable in the square			while(total > square){				square_size++;				square = square_size * square_size;			}						/*			var total_pixel_area:Number;			if(stage.stageWidth > stage.stageHeight){//				trace('using height');				total_pixel_area = stage.stageHeight;			} else {//				trace('using width');				total_pixel_area = stage.stageWidth;			}			*/						var total_pixel_area_without_padding_width:Number = stage.stageWidth // maximum area possible				- (					(square_size * (thumbnailPadding.left+thumbnailPadding.right))  // thumb padding					+ (square_size * (_listPadding.left+_listPadding.right))  // list item padding					+ (_containerPadding.left+_containerPadding.right)  // container padding				);			var total_pixel_area_without_padding_height:Number = stage.stageHeight 				- (					(square_size * (thumbnailPadding.top+thumbnailPadding.bottom)) 					+ (square_size * (_listPadding.top+_listPadding.bottom)) 					+ (_containerPadding.top+_containerPadding.bottom)				);																//			if(total_pixel_area_without_padding < SMALLEST_THUMBNAIL_SIZE){//				trace('Error, screen size too small to fit albums');//				dispatchEvent(new Event(ALBUMS_DONT_FIT, true, true));//			}			//			var thumbnail_size:Number = total_pixel_area_without_padding / square_size;			var thumbnail_size_height = (total_pixel_area_without_padding_height / square_size); //  - (thumbnailPadding.top + thumbnailPadding.bottom)			var thumbnail_size_width = (total_pixel_area_without_padding_width / square_size); //  - (thumbnailPadding.left + thumbnailPadding.right)			var thumbnail_size:Number = (thumbnail_size_width>thumbnail_size_height)?thumbnail_size_height:thumbnail_size_width;						total_pixel_area_width = (										(square_size * thumbnail_size)										+ (square_size * (thumbnailPadding.left+thumbnailPadding.right))  // thumb padding										+ (square_size * (_listPadding.left+_listPadding.right))  // list item padding										+ (_containerPadding.left+_containerPadding.right)  // container padding									);				total_pixel_area_height = (										(square_size * thumbnail_size)										+ (square_size * (thumbnailPadding.top+thumbnailPadding.bottom)) 										+ (square_size * (_listPadding.top+_listPadding.bottom)) 										+ (_containerPadding.top+_containerPadding.bottom)									);						thumbnail_size_width = thumbnail_size + thumbnailPadding.left+thumbnailPadding.right;			thumbnail_size_height = thumbnail_size + thumbnailPadding.top+thumbnailPadding.bottom;			/*			trace('thumbnail_size',thumbnail_size);			trace('thumbnail_size_width',thumbnail_size_width);			trace('thumbnail_size_height',thumbnail_size_height);			trace('total thumbtotal_pixel_area_without_padding_width',total_pixel_area_without_padding_width);			trace('total_pixel_area_without_padding_height',total_pixel_area_without_padding_height);			*/			//			trace('thumbnail_size'+thumbnail_size);			var i:uint = 0;			var row:uint = 0;			var col:uint = 0;			var empty_rows = square_size - Math.ceil(total / square_size);			var total_empty_row_area:Number = empty_rows * (_listPadding.top + _listPadding.bottom + thumbnailPadding.top + thumbnailPadding.bottom + thumbnail_size);//			trace('empty_rows',empty_rows);//			trace('total_empty_row_area',total_empty_row_area);			var offsetX:Number = total_pixel_area_width/2;			var offsetY:Number = (total_pixel_area_height - total_empty_row_area)/2;//			trace('offset',offsetX,offsetY);			/*			if(thumbnail_size < SMALLEST_THUMBNAIL_SIZE){				dispatchEvent(new Event(ALBUMS_DONT_FIT, true, true));				thumbnail_size = SMALLEST_THUMBNAIL_SIZE;			}			*///			trace(thumbnail_size_width,thumbnail_size_height);//			trace(_thumbnailCollection[0].width,_thumbnailCollection[0].height);						while(i < total){				row = i / square_size;				col = i % square_size;				_thumbnailCollection[i].x = (col * thumbnail_size_width) + ((col * (_listPadding.left+_listPadding.right))+_listPadding.left) + _containerPadding.left;				_thumbnailCollection[i].y = (row * thumbnail_size_height) + ((row * (_listPadding.top+_listPadding.bottom))+_listPadding.top) + _containerPadding.top;				_thumbnailCollection[i].resizeThumbnail(thumbnail_size,thumbnail_size);//				trace('thumb',_thumbnailCollection[i].x,_thumbnailCollection[i].y,_thumbnailCollection[i].width,_thumbnailCollection[i].height);				i++;			}						BitmapUtils.colorToRoundedBoxShape(_bgColor,total_pixel_area_width, total_pixel_area_height - total_empty_row_area,10,10,_bgShape);//			BitmapUtils.colorToShape(_bgColor, _bgShape, total_pixel_area_width, total_pixel_area_height - total_empty_row_area);						i=0;			while(i < total){//				trace('t1',_thumbnailCollection[i].x,_thumbnailCollection[i].y);				_thumbnailCollection[i].x -= offsetX;				_thumbnailCollection[i].y -= offsetY;//				trace('t2',_thumbnailCollection[i].x,_thumbnailCollection[i].y);				i++;			}//			trace('coords',_bgShape.x,_bgShape.y, _bgShape.width, _bgShape.height);			_bgShape.x = -offsetX;			_bgShape.y = -offsetY;						dispatchEvent(new Event(LAYOUT_UPDATED));		}	}}