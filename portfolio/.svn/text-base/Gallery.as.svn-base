package  {		import flash.display.MovieClip;	import flash.text.TextField;	import flash.events.Event;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.Shape;	import com.greensock.TweenLite;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.display.SimpleButton;	import flash.events.MouseEvent;	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.net.URLLoader;	import flash.geom.PerspectiveProjection;	import flash.display.Sprite;	import flash.geom.Point;	import flash.display.BitmapData;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.geom.Matrix3D;		public class Gallery extends Sprite {		private var _introBgShape:Shape = new Shape();		private var _fullscreenPhoto:FullscreenPhoto; // the container is never added or removed from the stage, so it's position in the heirarchy never changes		private var _thumbnailContainer:ThumbnailContainer;		private var _linkBarMC:MovieClip;		private var _replayBtn:SimpleButton;		private var _introTextMC:MovieClip;		private var _replayMenuMC:MovieClip;				public var introBgColor:uint      					= 0xFFFFFF;		public static const STATE_INTRO:String				= 'intro';		public static const STATE_LOADER:String				= 'loader';		public static const STATE_ALBUM_MODE:String			= 'albumMode';		public static const STATE_SLIDESHOW_MODE:String		= 'slideshowMode';		public static const STATE_DISPLAY:String			= 'display';		public static const STATE_ANIMATING:String			= 'animating';		public static const STATE_STOPPED:String			= 'stopped';		private var _animationState:String					= STATE_INTRO;				private var _photoPos:uint = 0;		private var _imageLoader:Loader;				private var _albumList:XML;		private var _slideshow:XML;		private var _preloader:Preloader					= new Preloader();				// 3D stuff		private var _pp:PerspectiveProjection				= transform.perspectiveProjection;				public function Portfolio() {			super();						// set project properties			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.addEventListener(Event.RESIZE, resizeHandler);						// assign references to assets			_introTextMC = getChildByName('introTextMC') as MovieClip;			_replayMenuMC = getChildByName('replayMenuMC') as MovieClip;			_linkBarMC = _replayMenuMC.getChildByName('linkBarMC') as MovieClip;			_replayBtn = _replayMenuMC.getChildByName('replayBtn') as SimpleButton;						removeChild(_introTextMC);			removeChild(_replayMenuMC);						_linkBarMC.alpha=0;			_replayBtn.alpha=0;			_introTextMC.alpha=0;			// initialize layout			addChild(_introBgShape);			addChild(_introTextMC);			addChild(_preloader);			resizeHandler();			drawBgShapeFill();						var xmlLoader:URLLoader = new URLLoader();						xmlLoader.addEventListener(Event.COMPLETE, loadXML);			xmlLoader.load(new URLRequest("albums.xml"));						// this should always be in the dead center of the stage, so it needs to be calculated on resize too			_pp.projectionCenter = new Point((stage.stageWidth / 2), (stage.stageHeight / 2));		}				public static const MAX_ALBUM_ROTATION_X = 5;		public static const MAX_ALBUM_ROTATION_Y = 5;				private function hoverEffect(evt:MouseEvent):void{			var ratioW:Number = evt.stageX/stage.stageWidth; // position between 0 and width			var ratioH:Number = evt.stageY/stage.stageHeight; // position between 0 and height			var rX:Number = (ratioH * (MAX_ALBUM_ROTATION_X*2)) - MAX_ALBUM_ROTATION_X; // rotation X works vertically, so use height			var rY:Number = (ratioW * (MAX_ALBUM_ROTATION_Y*2)) - MAX_ALBUM_ROTATION_Y; // rotation Y works horizontally, so use width//			TweenLite.to(_thumbnailContainer, 1, { x:Math.round(evt.stageX), y:Math.round(evt.stageY) });			TweenLite.to(_thumbnailContainer, 1, { rotationX:(rX * -1), rotationY:rY }); // rotation X has to be flipped because 0 is the highest position not the lowest		}				private function loadXML(e:Event):void {			_albumList = new XML(e.target.data);			_fullscreenPhoto = new FullscreenPhoto(_albumList..photo[0]);			_thumbnailContainer = new ThumbnailContainer(_albumList);			var thumbs:Array = _thumbnailContainer.thumbnailCollection;			var tl:uint = thumbs.length-1;			var i:uint=0;			while(i<tl){				_preloader.registerItem(thumbs[i]);				i++;			}			_preloader.updateDisplayList();			_preloader.addEventListener(Preloader.LOADING_COMPLETE,creationComplete);			_thumbnailContainer.loadThumbnails();			// 3 and 2		}				private function creationComplete(evt:Event):void{			_preloader.removeEventListener(Preloader.LOADING_COMPLETE,creationComplete);			TweenLite.to(_preloader,1,{				alpha:0,onComplete:function(){					removeChild(_preloader);					TweenLite.to(_introTextMC,.5,{delay:.5,alpha:1,onComplete:fadeIntroTextOut});				}			});		}				private function fadeIntroTextOut():void{			// 2 and 2			TweenLite.to(_introTextMC,.5,{delay:.5,alpha:0,onComplete:fadeInPortfolio});		}				private function fadeInPortfolio():void{			trace('loader');			_animationState = STATE_LOADER;			resizeHandler();			removeChild(_introTextMC);			// 3 seconds			TweenLite.to(_introBgShape, .5, {alpha:0, onComplete:fadeToBlackComplete});		}				private function fadeToBlackComplete():void{			trace('fadeToBlackComplete');						_thumbnailContainer.addEventListener(ThumbnailContainer.SLIDESHOW_MODE, startAsSlideshow);			_thumbnailContainer.addEventListener(ThumbnailContainer.ALBUM_VIEW_MODE, startAsAlbumPicker);			_thumbnailContainer.addEventListener(ThumbnailContainer.EMPTY_MODE, displayError);//			_thumbnailContainer.addEventListener(ThumbnailContainer.LAYOUT_UPDATED, centerThumbnails);			_thumbnailContainer.alpha=0;						if(contains(_replayMenuMC)){ removeChild(_replayMenuMC); }			// if(contains(_introBgShape)){ removeChild(_introBgShape); }			if(!contains(_fullscreenPhoto)){ addChild(_fullscreenPhoto); }			if(!contains(_thumbnailContainer)){ addChild(_thumbnailContainer); }			// center the registration point for this sprite		}				private function startAsSlideshow(evt:Event=null):void{			trace('startSlideshow');			_animationState = STATE_SLIDESHOW_MODE;			resizeHandler();			_fullscreenPhoto.focusPhotoShape();			_fullscreenPhoto.showPhotoLabel();			_fullscreenPhoto.showAlbumLabel();			_fullscreenPhoto.showLabelBackground();		}				private function startAsAlbumPicker(evt:Event=null):void{			trace('startAlbumPicker');			_animationState = STATE_ALBUM_MODE;			_thumbnailContainer.addEventListener(AlbumEvent.CHANGE_FULLSCREEN_PHOTO,changeFullscreenPhotoHandler);			_thumbnailContainer.addEventListener(AlbumEvent.LAUNCH_SLIDESHOW,launchSlideshowHandler);			_thumbnailContainer.addEventListener(ThumbnailContainer.ALBUMS_VISIBLE,enableAlbumInteraction);			resizeHandler();			_fullscreenPhoto.blurPhotoShape();			_thumbnailContainer.showAlbum();		}				private var _cube:CubeTransition; 				private function enableAlbumInteraction(evt:Event):void{			_thumbnailContainer.removeEventListener(ThumbnailContainer.ALBUMS_VISIBLE,enableAlbumInteraction);			stage.addEventListener(MouseEvent.MOUSE_MOVE,hoverEffect);		}				private function displayError(evt:Event=null):void{			trace('displayError');			_animationState = STATE_STOPPED;			// womp waaah		}				private function launchSlideshowHandler(evt:AlbumEvent):void{			trace('caught '+AlbumEvent.LAUNCH_SLIDESHOW);			// kill the listeners for catching requests to jump albums immediately			_thumbnailContainer.removeEventListener(AlbumEvent.CHANGE_FULLSCREEN_PHOTO,changeFullscreenPhotoHandler);			_thumbnailContainer.removeEventListener(AlbumEvent.LAUNCH_SLIDESHOW,launchSlideshowHandler);			// kill the album interactions			stage.removeEventListener(MouseEvent.MOUSE_MOVE,hoverEffect);						// set slide show meta data			_slideshow = evt.metaData;			_fullscreenPhoto.meta = _slideshow..photo[0];			// hide the things visible right now and wait for them to be hidden to load in the new photo			trace('hide album');			_thumbnailContainer.hideAlbum();			_thumbnailContainer.addEventListener(ThumbnailContainer.ALBUMS_HIDDEN,startSlideshow);//			_fullscreenPhoto.addEventListener(FullscreenPhoto.PHOTO_HIDDEN,startSlideshow);			trace('hide photo shape');			_fullscreenPhoto.hidePhotoShape();		}				private function startSlideshow(evt:Event):void{			trace('start slideshow');			_animationState = STATE_SLIDESHOW_MODE;			/*			if(_fullscreenPhoto.hasEventListener(FullscreenPhoto.PHOTO_HIDDEN)){				trace('remove start slideshow listener');				_fullscreenPhoto.removeEventListener(FullscreenPhoto.PHOTO_HIDDEN,startSlideshow);				removeChild(_thumbnailContainer);			}			*/			if(_thumbnailContainer.hasEventListener(ThumbnailContainer.ALBUMS_HIDDEN)){				trace('remove start slideshow listener');				_thumbnailContainer.removeEventListener(ThumbnailContainer.ALBUMS_HIDDEN,startSlideshow);				removeChild(_thumbnailContainer);			}			trace('wait for photo to be ready or next slide animation to fire');			_fullscreenPhoto.addEventListener(FullscreenPhoto.PHOTO_READY,_fullscreenPhoto.startSlideshow);			_fullscreenPhoto.addEventListener(FullscreenPhoto.NEXT_SLIDE,loadNextSlide);			_photoPos=0;			trace('try and load the image');			_fullscreenPhoto.loadImage();		}				private function changeFullscreenPhotoHandler(evt:AlbumEvent):void{			trace('caught '+AlbumEvent.CHANGE_FULLSCREEN_PHOTO);			if(_fullscreenPhoto.meta != evt.metaData){				_fullscreenPhoto.changeFullscreenPhoto( evt.metaData );			}		}				private function loadNextSlide(evt:Event):void{//			_fullscreenPhoto.removeChild(_photoShape);						trace('load next image');			_photoPos++;			if(_photoPos >= _slideshow..photo.length()){				trace('load ',_photoPos, 'end');				_animationState = STATE_STOPPED;				resizeHandler();				_photoPos = 0;				addChildAt(_replayMenuMC,numChildren-1);				TweenLite.to(_replayBtn,3,{alpha:1});				TweenLite.to(_linkBarMC,3,{delay:1.5, alpha:1});				_replayBtn.addEventListener(MouseEvent.CLICK,replayBtnClickHandler);			} else {				trace('load ',_photoPos,'start');				_fullscreenPhoto.meta = _slideshow..photo[_photoPos];				_fullscreenPhoto.addEventListener(FullscreenPhoto.PHOTO_READY,_fullscreenPhoto.animateSlideInAndOut);				_fullscreenPhoto.loadImage();//				loadImage(_albumList..photo[_photoPos]);			}		}				private function replayBtnClickHandler(evt:MouseEvent):void{			_replayBtn.removeEventListener(MouseEvent.CLICK,replayBtnClickHandler);			TweenLite.to(_replayBtn,1.5,{alpha:0});			TweenLite.to(_linkBarMC,1,{delay:.5, alpha:0, onComplete:fadeToBlackComplete});		}				private function resizeHandler(evt:Event=null):void{			_pp.projectionCenter = new Point(((stage.stageWidth) / 2), ((stage.stageHeight) / 2));			trace(_animationState);			switch(_animationState){				case STATE_LOADER:				case STATE_INTRO:					_preloader.updateDisplayList();					_introTextMC.x = (stage.stageWidth/2) - (_introTextMC.width/2);					_introTextMC.y = (stage.stageHeight/2) - (_introTextMC.height/2);					_introBgShape.width = stage.stageWidth;					_introBgShape.height = stage.stageHeight;				break;				case STATE_ANIMATING:					_introBgShape.width = stage.stageWidth;					_introBgShape.height = stage.stageHeight;				break;				case STATE_ALBUM_MODE:					_fullscreenPhoto.updateDisplayList(evt);					_thumbnailContainer.updateDisplayList(evt);//					_thumbnailContainer.x = (stage.stageWidth/2) - (_thumbnailContainer.width/2);//					_thumbnailContainer.y = (stage.stageHeight/2) - (_thumbnailContainer.height/2);					// after the registration point for the sprite has been centered, we can just do this//					_thumbnailContainer.setRegistrationPoint( _thumbnailContainer.width >> 1, _thumbnailContainer.height >> 1);					_thumbnailContainer.x = (stage.stageWidth/2);					_thumbnailContainer.y = (stage.stageHeight/2);				break;				case STATE_SLIDESHOW_MODE:					_fullscreenPhoto.updateDisplayList(evt);				break;				case STATE_STOPPED:					_replayMenuMC.x = (stage.stageWidth/2) - (_replayMenuMC.width/2);					_replayMenuMC.y = (stage.stageHeight/2) - (_replayMenuMC.height/2);				break;			}			if(_cube){				_cube.x = stage.stageWidth / 2;				_cube.y = stage.stageHeight / 2;			}					}//		private function centerThumbnails(evt:Event):void{//			_thumbnailContainer.setRegistrationPoint(_thumbnailContainer,_thumbnailContainer.width >> 1, _thumbnailContainer.height >> 1);//		}				private function drawBgShapeFill():void{			BitmapUtils.colorToShape(introBgColor,_introBgShape);			_introBgShape.width = stage.stageWidth;			_introBgShape.height = stage.stageHeight;		}	}}