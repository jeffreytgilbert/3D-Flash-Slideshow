package  {	import flash.display.Shape;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.events.Event;	import flash.display.MovieClip;	import com.greensock.TweenLite;	import com.greensock.plugins.BlurFilterPlugin;//	import com.greensock.*; 	import com.greensock.easing.*;	import flash.display.Loader;	import com.greensock.plugins.TweenPlugin;	import flash.net.URLRequest;	import flash.display.Bitmap;	import flash.events.IOErrorEvent;	public class FullscreenPhoto extends MovieClip {		// Events this dispatches		public static const PHOTO_READY:String 					= 'photoReady';		public static const PHOTO_BLURRED:String				= 'photoBlurred';		public static const PHOTO_FOCUSED:String				= 'photoFocused';		public static const PHOTO_VISIBLE:String				= 'photoVisible';		public static const PHOTO_HIDDEN:String					= 'photoHidden';		public static const PHOTO_LABEL_VISIBLE:String			= 'photoLabelVisible';		public static const PHOTO_LABEL_HIDDEN:String			= 'photoLabelHidden';		public static const ALBUM_LABEL_VISIBLE:String			= 'albumLabelVisible';		public static const ALBUM_LABEL_HIDDEN:String			= 'albumLabelHidden';		public static const LABEL_BACKGROUND_VISIBLE:String		= 'labelBackgroundVisible';		public static const LABEL_BACKGROUND_HIDDEN:String		= 'labelBackgroundHidden';		public static const NEXT_SLIDE:String					= 'nextSlide';		public static const INVALID_PHOTO_FORMAT:String			= 'invalidPhotoFormat';				private const BOTTOM_TEXT_OFFSET:Number	= 24; // this is for the fonts position against the black bg color that sits on the picture		private var _photoLabelBgShape:Shape	= new Shape(); // This is a small shape at the bottom of the picture which serves 		private var _photoShape:Shape			= new Shape(); // Rather than using a loader, this is using a shape to display and smooth the image		private var _photoLabelTextTF:TextField = new TextField();		private var _albumLabelTextTF:TextField = new TextField();		private var _font:FontAlbumLabel		= new FontAlbumLabel();		private var _albumLabelFormat:TextFormat= new TextFormat();		private var _photoLabelFormat:TextFormat= new TextFormat();		private var _photoBgColor:uint			= 0xFFFFFF;		private var _imageLoader:Loader;		private var _photoList:XML;				private var _photoName:String = '';		public function get photoName():String{ return _photoName; }		public function set photoName(photoName:String):void{ _photoName=photoName; }				private var _albumName:String = 'Skinner Airport, 37TS: (214) 912-3959';		public function get albumName():String{ return _albumName; }		public function set albumName(albumName:String):void{ _albumName=albumName; }				private var _meta:XML;		public function get meta():XML{ return _meta; }		public function set meta(meta:XML):void{ _meta=meta; }		public function FullscreenPhoto(photo:XML, preloadImage:Boolean=true) {			// constructor code			_meta = photo;			trace(photo.toXMLString());						TweenPlugin.activate([BlurFilterPlugin]);						_albumLabelFormat.font=_font.fontName;			_albumLabelFormat.size=15;			_albumLabelFormat.color=0x000000;						_albumLabelTextTF.autoSize=TextFieldAutoSize.LEFT;			_albumLabelTextTF.defaultTextFormat=_albumLabelFormat;			_albumLabelTextTF.embedFonts=true;			_albumLabelTextTF.text=_albumName;			_albumLabelTextTF.selectable=false;						_photoLabelFormat.font=_font.fontName;			_photoLabelFormat.size=15;			_photoLabelFormat.color=0x000000;						_photoLabelTextTF.autoSize=TextFieldAutoSize.RIGHT;			_photoLabelTextTF.defaultTextFormat=_photoLabelFormat;			_photoLabelTextTF.embedFonts=true;			_photoLabelTextTF.text=_photoName;			_photoLabelTextTF.selectable=false;						_photoShape.alpha = 0;			_albumLabelTextTF.alpha = 0;			_photoLabelTextTF.alpha = 0;			_photoLabelBgShape.alpha = 0;						addChild(_photoShape);			addChild(_photoLabelBgShape);			addChild(_photoLabelTextTF);			addChild(_albumLabelTextTF);						addEventListener(Event.ADDED_TO_STAGE,updateDisplayList);//			addEventListener(Event.REMOVED_FROM_STAGE,markAsRemoved);						if(preloadImage){ loadImage(); }		}				public function loadImage():void {			// Set properties on my Loader object			_imageLoader = BitmapUtils.loadImage(_meta.@src.toString(),imageLoaded,imageLoaded);		}				private function imageLoaded(evt:Event):void {//			trace('album: '+_albumLabelTextTF.text);			var bitmap:Bitmap = evt.target.content;			if(!bitmap || !bitmap.bitmapData){				dispatchEvent(new Event(INVALID_PHOTO_FORMAT,true,true));				BitmapUtils.colorToShape(0x330000,_photoShape);				_photoShape.alpha = 0;				_photoLabelTextTF.text = 'Photo not loaded, invalid format';			} else {				BitmapUtils.bitmapToShape(bitmap,_photoShape);				_photoShape.alpha = 0;				_photoLabelTextTF.text = _meta.toString();			}							_imageLoader = new Loader();			//			trace('broadcast event to say photo ready');			dispatchEvent(new Event(PHOTO_READY,true,true));						// Load Image			if(stage) { resizeImage(); }		}				public function startSlideshow(evt:Event=null):void{//			trace('start animations to show slideshow');			if(hasEventListener(FullscreenPhoto.PHOTO_READY)){ removeEventListener(FullscreenPhoto.PHOTO_READY,startSlideshow); }			addEventListener(FullscreenPhoto.PHOTO_READY,animateSlideInAndOut);			showLabelBackground();			showPhotoLabel();			showAlbumLabel();//			trace('start next slide animation in (local to photo)');			animateSlideInAndOut();//			loadNextSlide();		}				public function loadNextSlide(evt:Event=null):void{//			trace('next slide');			TweenLite.to(_photoShape,.5,{				alpha:0, onComplete:function():void{//					trace('fade out complete');					loadImage();					TweenLite.to(_photoShape,.5,{ alpha:.5 });					TweenLite.to(_photoShape, 1, {						//blurFilter:{blurX:0,blurY:0}, 						delay:5, alpha:0, onComplete:function():void{							dispatchEvent(new Event(NEXT_SLIDE,true,true));						}					});				}			});		}				public function focusPhotoShape(speed:Number=.5):void{			TweenLite.to(_photoShape, speed, {				//blurFilter:{blurX:0,blurY:0}, 				alpha:1, onComplete:function():void{					dispatchEvent(new Event(PHOTO_FOCUSED,true,true));				}			});		}				public function blurPhotoShape(speed:Number=.5):void{			TweenLite.to(_photoShape, speed, {				//blurFilter:{blurX:10,blurY:10}, 				alpha:.5, onComplete:function():void{					dispatchEvent(new Event(PHOTO_BLURRED,true,true));				}			});		}				public function animateSlideInAndOut(evt:Event=null):void{//			trace('animate slide in and out');			showPhotoLabel();			TweenLite.to(_photoShape,3,{				alpha:1, onComplete:function():void{					dispatchEvent(new Event(PHOTO_VISIBLE,true,true));										TweenLite.to(_photoShape,3,{						delay:5, alpha:0, onStart:hidePhotoLabel, onComplete:function():void{//							trace('animation complete');							dispatchEvent(new Event(PHOTO_HIDDEN,true,true));							dispatchEvent(new Event(NEXT_SLIDE,true,true));						}					});				}			});		}				public function showPhotoShape(speed:Number=3):void{			TweenLite.to(_photoShape,speed,{				alpha:1, onComplete:function():void{					dispatchEvent(new Event(PHOTO_VISIBLE,true,true));					TweenLite.to(_photoShape,speed,{						delay:5, alpha:0, onComplete:function():void{							dispatchEvent(new Event(NEXT_SLIDE,true,true));						}					});				}			});		}				public function hidePhotoShape(speed:Number=.5):void{			TweenLite.to(_photoShape,speed,{				alpha:0, onComplete:function():void{					dispatchEvent(new Event(PHOTO_HIDDEN,true,true));				}			});		}				public function showLabelBackground(speed:Number=3):void{			TweenLite.to(_photoLabelBgShape,speed,{				alpha:.5, onComplete:function():void{					dispatchEvent(new Event(LABEL_BACKGROUND_VISIBLE,true,true));				}			});		}				public function hideLabelBackground(speed:Number=2):void{			TweenLite.to(_photoLabelBgShape,speed,{				alpha:0, onComplete:function():void{					dispatchEvent(new Event(LABEL_BACKGROUND_HIDDEN,true,true));				}			});		}				public function showPhotoLabel(speed:Number=3):void{			TweenLite.to(_photoLabelTextTF,speed,{				alpha:1, onComplete:function():void{					dispatchEvent(new Event(PHOTO_LABEL_VISIBLE,true,true));				}			});		}				public function hidePhotoLabel(speed:Number=2):void{			TweenLite.to(_photoLabelTextTF,speed,{				alpha:0, onComplete:function():void{					dispatchEvent(new Event(PHOTO_LABEL_HIDDEN,true,true));				}			});		}				public function showAlbumLabel(speed:Number=3):void{			TweenLite.to(_albumLabelTextTF,speed,{				alpha:.75, onComplete:function():void{					dispatchEvent(new Event(ALBUM_LABEL_VISIBLE,true,true));				}			});		}				public function hideAlbumLabel(speed:Number=2):void{			TweenLite.to(_albumLabelTextTF,speed,{				alpha:0, onComplete:function():void{					dispatchEvent(new Event(ALBUM_LABEL_HIDDEN,true,true));				}			});		}				public function changeFullscreenPhoto(meta:XML):void{			_meta = meta;			TweenLite.to(_photoShape,.5,{				alpha:0, onComplete:function():void{					loadImage();					TweenLite.to(_photoShape,.5,{ alpha:.5 });				}			});		}				public function resizeImage():void{//			trace('resizing image');//			trace('resize and position image');			resizeToWidth();		}				private function resizeToWidth():void{			var ratio:Number;			trace(stage.stageWidth);			trace(_photoShape.width);			ratio = stage.stageWidth / _photoShape.width;			if((_meta.@showEveryPixel.toString() == 'true') && (_photoShape.height * ratio) > stage.stageHeight){				resizeToHeight();			} else {				_photoShape.width = stage.stageWidth;				_photoShape.height = _photoShape.height * ratio;				_photoShape.x = 0;				_photoShape.y = (stage.stageHeight - _photoShape.height)/2;			}		}				private function resizeToHeight():void{			var ratio:Number;			ratio = stage.stageHeight / _photoShape.height;			if(_meta.@showEveryPixel.toString() == 'true'){				resizeToWidth();			} else {				_photoShape.height = stage.stageHeight;				_photoShape.width = _photoShape.width * ratio;				_photoShape.x = (stage.stageWidth - _photoShape.width)/2;				_photoShape.y = 0;			}		}				public function resizeHandler(evt:Event=null):void{//			trace('resizeHandler on FullscreenPhoto');			resizeImage();			// photo title			_photoLabelTextTF.width = stage.stageWidth-10;			_photoLabelTextTF.x = 0;			_photoLabelTextTF.y = stage.stageHeight - BOTTOM_TEXT_OFFSET;			// album title			_photoLabelTextTF.width = stage.stageWidth-10;			_albumLabelTextTF.x = 10;			_albumLabelTextTF.y = stage.stageHeight - BOTTOM_TEXT_OFFSET;			// bg area 			_photoLabelBgShape.width = stage.stageWidth;			_photoLabelBgShape.y = (stage.stageHeight - 30);		}				public function updateDisplayList(evt:Event=null):void{			resizeHandler(evt);			drawLabelBgShapeFill();		}				private function drawLabelBgShapeFill():void{			BitmapUtils.colorToShape(_photoBgColor,_photoLabelBgShape);			_photoLabelBgShape.width = stage.stageWidth;			_photoLabelBgShape.height = 30;			_photoLabelBgShape.x = 0;			_photoLabelBgShape.y = (stage.stageHeight - 30);		}	}}