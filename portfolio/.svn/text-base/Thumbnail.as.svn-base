package  {	import flash.display.Shape;	import flash.events.Event;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.events.IOErrorEvent;	import flash.display.Bitmap;	import com.greensock.TweenLite;	import flash.display.DisplayObject;	import flash.geom.Rectangle;	import flash.display.BitmapData;	import flash.geom.Matrix;	import flash.display.PixelSnapping;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.display.Sprite;		// represents an entire album, but has a photos meta data too	public class Thumbnail extends Sprite {		public static const THUMBNAIL_READY:String 			= 'thumbnailReady';		public static const THUMBNAIL_HIDDEN:String 		= 'thumbnailHidden';		public static const THUMBNAIL_VISIBLE:String 		= 'thumbnailVisible';		public static const INVALID_THUMBNAIL_FORMAT:String = 'invalidThumbnailFormat';				private var _frameShape:Shape						= new Shape();		private var _maskShape:Shape						= new Shape();		private var _textMaskShape:Shape					= new Shape();		private var _albumLabelTextTF:TextField 			= new TextField();		private var _font:FontAlbumLabel					= new FontAlbumLabel();		private var _albumLabelFormat:TextFormat			= new TextFormat();		private var _bitmap:Bitmap;		private var _bgColor:uint;		private var _thumbWidth:Number;		private var _thumbHeight:Number;		private var _imageLoader:Loader;				private var _photosOriginalWidth:Number;		public function get photosOriginalWidth():Number{ return _photosOriginalWidth; }				private var _photosOriginalHeight:Number;		public function get photosOriginalHeight():Number{ return _photosOriginalHeight; }				private var _photoShape:Shape						= new Shape();		public function get photoShape():Shape{ return _photoShape; }				private var _meta:XML;		public function get meta():XML{ return _meta; }		public function set meta(meta:XML):void{ _meta=meta; }				private var _padding:Padding;		public function set padding(padding:Padding):void{			_padding = padding;			resizeThumbnail(_thumbWidth,_thumbHeight);		}		public function get padding():Padding{ return _padding; }				public function Thumbnail(album:XML, thumbWidth:Number=50, thumbHeight:Number=50, padding:Padding=null, bgColor=0xFFFFFF) {			// constructor code			_meta = album;						_albumLabelFormat.font=_font.fontName;			_albumLabelFormat.size=12;			_albumLabelFormat.color=0x0;						_albumLabelTextTF.autoSize=TextFieldAutoSize.LEFT;			_albumLabelTextTF.defaultTextFormat=_albumLabelFormat;			_albumLabelTextTF.embedFonts=true;			_albumLabelTextTF.text=album.@title.toString();			_albumLabelTextTF.selectable=false;						_thumbWidth = thumbWidth;			_thumbHeight = thumbHeight;			if(!padding){ _padding = new Padding(4); trace('null padding'); }			else { _padding = padding; } 			_bgColor = bgColor;			addChild(_frameShape);			addChild(_photoShape);			addChild(_maskShape);			addChild(_albumLabelTextTF);			addChild(_textMaskShape);			_photoShape.mask = (_maskShape as DisplayObject);			_albumLabelTextTF.mask = _textMaskShape; 		}				public function loadImage():void {			// Set properties on my Loader object			_imageLoader = BitmapUtils.loadImage(_meta..photo[0].@src.toString(),imageLoaded);		}				private function imageLoaded(evt:Event):void {			var bitmap:Bitmap = evt.target.content;			if(!bitmap || !bitmap.bitmapData){				trace('error loading');				dispatchEvent(new Event(INVALID_THUMBNAIL_FORMAT,true,true));				BitmapUtils.colorToShape(0x330000,_photoShape);			} else if(bitmap.width > bitmap.height){				trace('crop wide thumbnail to square');				_bitmap = BitmapUtils.crop(bitmap, 										   ((bitmap.width - bitmap.height) / 2), 										   0, 										   bitmap.height, 										   bitmap.height);			} else {				trace('crop tall thumbnail to square');				_bitmap = BitmapUtils.crop(bitmap, 										   0,										   ((bitmap.height - bitmap.width) / 2),										   bitmap.width,										   bitmap.width);			}//			resizeThumbnail(_thumbWidth,_thumbHeight);						dispatchEvent(new Event(THUMBNAIL_READY)); // do not want or need this to bubble since it happens for every thumbnail loaded in a list			_imageLoader = new Loader();		}				public function showThumbnail(speed:Number=3):void{			TweenLite.to(_photoShape,speed,{				alpha:1, onComplete:function():void{					dispatchEvent(new Event(THUMBNAIL_VISIBLE,true,true));				}			});		}				public function hideThumbnail(speed:Number=2):void{			TweenLite.to(_photoShape,speed,{				alpha:0, onComplete:function():void{					dispatchEvent(new Event(THUMBNAIL_HIDDEN,true,true));				}			});		}				public function resizeThumbnail(thumbWidth:Number, thumbHeight:Number):void{//			trace(thumbWidth,thumbHeight);			//trace('resizeThumbnail');			_thumbWidth = thumbWidth;			_thumbHeight = thumbHeight;			var totalWidth:Number = _thumbWidth+_padding.left+_padding.right;			var totalHeight:Number = _thumbWidth+_padding.top+_padding.bottom;						// fix the size of this movie and the frame			BitmapUtils.colorToRoundedBoxShape(_bgColor, totalWidth, totalHeight, 6, 6, _frameShape);						BitmapUtils.colorToRoundedBoxShape(_bgColor, totalWidth, totalHeight, 6, 6, _maskShape);			_maskShape.x = _padding.left;			_maskShape.y = _padding.top;			_maskShape.width = _thumbWidth;			_maskShape.height = _thumbHeight;			//			_photoShape = BitmapUtils.colorToShape(0x00ff00,_photoShape);			_photoShape = BitmapUtils.bitmapToShape(_bitmap,_photoShape);			_photoShape.alpha = 1;						var ratio:Number = _thumbWidth / _bitmap.width;			_photoShape.height = _photosOriginalHeight = _bitmap.height * ratio;			_photoShape.width = _photosOriginalWidth = _thumbWidth;						_photoShape.x = _padding.left;			_photoShape.y = _padding.top;			_albumLabelTextTF.width = _photoShape.width;			_albumLabelTextTF.x = _padding.left;			_albumLabelTextTF.y = _padding.top + _photoShape.height+3;						BitmapUtils.colorToShape(_bgColor,_textMaskShape);						_textMaskShape.x = _albumLabelTextTF.x;			_textMaskShape.y = _padding.top + _photoShape.height;			_textMaskShape.width = _thumbWidth;			_textMaskShape.height = _padding.bottom;//			trace('_frameShape',_frameShape.height,_frameShape.width,_frameShape.x,_frameShape.y);//			trace('_maskShape',_maskShape.height,_maskShape.width,_maskShape.x,_maskShape.y);//			trace('_photoShape',_photoShape.height,_photoShape.width,_photoShape.x,_photoShape.y);//			trace('this',height,width,x,y);		}	}}